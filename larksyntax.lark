start: codebody

codebody: (function | statement)*

function: "function" identifier "(" ((identifier ":" vartype) ("," identifier ":" vartype)*)? ")" ("->" vartype)? "{" body "}"

classdec: "class" identifier "{" classbody "}"

classbody: (classfunction | statement)* -> codebody:


classmethod: "method" identifier "(" "self" (("," identifier ":" vartype) ("," identifier ":" vartype)*)? ")" ("->" vartype)? "{" body "}"  

?callnoret: call
call: identifier "(" (expression (", " expression)*)? ")"

returnstatement: "return" expression

body: statement*

statement: singlestatement ";"
         | ifclause
         | whilestatement
         | forstatement

?singlestatement: assignment
              | returnstatement
              | callnoret

ifclause: ifbranch elifbranch* elsebranch?

ifbranch: "if" "(" expression ")" "{" body "}"
elifbranch: "elif" "(" expression ")" "{" body "}"
elsebranch: "else" "{" body "}" 

whilestatement: "while" "(" expression ")" "{" body "}"

forstatement: "for" "(" singlestatement ";" expression ";" singlestatement ")" "{" body "}"

!assignment: identifier (":" vartype)? /([\|\^\&\+\-\*\/\%]|>>|<<)?=/ expression

?expression: number
          | identifier
          | "(" expression ")"
          | binaryop
          | unaryop
          | call
          | attribute
          | method

attribute: expression "." identifier

method: expression "." call

!binaryop: expression "||" expression
         | expression "&&" expression
         | expression "<=" expression
         | expression "<" expression
         | expression ">=" expression
         | expression ">" expression
         | expression "!=" expression
         | expression "==" expression
         | expression "|" expression
         | expression "^" expression
         | expression "&" expression
         | expression ">>" expression
         | expression "<<" expression
         | expression "+" expression
         | expression "-" expression
         | expression "*" expression
         | expression "/" expression
         | expression "%" expression         

!unaryop: ("-"|"~") expression

vartype: VALID_IDENTIFIER
identifier: VALID_IDENTIFIER
VALID_IDENTIFIER: /[A-Za-z][A-Za-z0-9_]*/

number: DECIMAL | HEXADECIMAL | OCTAL | BINARY
DECIMAL: /[0-9]+/
HEXADECIMAL: /0[Xx][0-9a-fA-F]+/
OCTAL: /0[Oo][0-7]+/
BINARY: /0[Bb][01]+/

%import common.WS
%ignore WS
%ignore /\s+/
